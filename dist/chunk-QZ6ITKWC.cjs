"use strict";var e=require("./chunk-GXOYTAOD.cjs"),t=require("qs"),r=class extends Error{constructor(t,r,o){const n=o?.trim()||e.CONFIG.PACKAGE.PREFIX.NAME,i=t.trim();super(`\n${n.startsWith("❌")?n:"❌ "+n} - ${i}`),this.originalError=r,this.name="RouterConfigError",Error.captureStackTrace&&Error.captureStackTrace(this,a)}},a=class t extends Error{constructor(r,a,o){const n=o?.trim()||e.CONFIG.PACKAGE.PREFIX.NAME,i=r.trim();super(`\n${n.startsWith("❌")?n:"❌ "+n} - ${i}`),this.originalError=a,this.name="RoutePropsError",Error.captureStackTrace&&Error.captureStackTrace(this,t)}},o=class{name;definition;config;wheres;bindings={};constructor(e,t,r){this.name=e,this.definition=t,this.bindings=t?.bindings??{},this.wheres=t?.wheres??{},this.config=r}get template(){const t=`${this.origin}/${this.definition?.uri}`.replace(/\/+$/,"");return e.o2(t)?"/":t}get origin(){if(!this.config?.absolute)return"";if(this.definition?.domain){const e=this.config.url.match(/^\w+:\/\//);if(!e)throw new r('Invalid `config.url` missing protocol (e.g., `"http://"` or `"https://"`).');return`${e[0]}${this.definition.domain}${this.config.port?`:${this.config.port}`:""}`}return this.config.url}get parameterSegments(){return this.template.match(/{[^}?]+\??}/g)?.map(e=>({name:e.replace(/{|\??}/g,""),required:!/\?}$/.test(e)}))??[]}matchesUrl(r){if(!this.definition?.methods.includes("GET"))return!1;const a=this.template.replace(/[.*+$()[\]]/g,"\\$&").replace(/(\/?){([^}?]*)(\??)}/g,(e,t,r,a)=>{const o=`(?<${r}>${this.wheres[r]?.replace(/(^\^)|(\$$)/g,"")||"[^/?]+"})`;return a?`(${t}${o})?`:`${t}${o}`}).replace(/^\w+:\/\//,""),[o,n]=r.replace(/^\w+:\/\//,"").split("?"),i=new RegExp(`^${a}/?$`).exec(o)??new RegExp(`^${a}/?$`).exec(decodeURI(o));if(i){for(const t in i.groups)i.groups[t]=e.i(i.groups[t])?decodeURIComponent(i.groups[t]):i.groups[t];return{params:i.groups,query:t.parse(n)}}return!1}compile(t={}){const r=this.template.replace(/{([^}?]+)(\??)}/g,(r,o,n)=>{const i=t[o];if(!n&&e.t(i))throw new a(`Invalid \`"${o}"\` parameter is required for route \`"${this.name}"\`.`);const s=this.wheres[o];if(s){const t=new RegExp(`^${s}$`);if(e.i(i)&&!t.test(i))throw new a(`Invalid \`"${o}"\` parameter \`"${i}"\` does not match required format \`${s}\` for route \`"${this.name}"\`.`)}return encodeURI(e.i(i)?i:"").replace(/%7C/g,"|").replace(/%25/g,"%").replace(/\$/g,"%24")});let o=r;if(this.config?.absolute&&r.includes("://")){const[e,t]=r.split("://");o=e+"://"+t.replace(/\/{2,}/g,"/")}else o=r.replace(/\/{2,}/g,"/");return"/"===o?"/":o.replace(/\/+$/,"")}},{REPO:n}=e.CONFIG,i=`\n\nℹ️ Learn more: \`${n.LINK}#importing-the-route-function\`.`,s=class t{absolute;url;port;defaults;routes;location;constructor(e){this.absolute=e.absolute,this.url=e.url,this.port=e.port,this.defaults=e.defaults,this.routes=e.routes,this.location=e.location}static isRouterConfigRaw(t){if(e.t(t))return!1;if(!e.n(t))throw new r(`Invalid \`route()\` the \`config\` property at (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid config object, but received: \`${e.x(t)}\`, with value: \`${e.realValue(t)}\`.${i}`);if(!e.i(t.url))throw new r(`Invalid \`route()\` parameter \`config.url\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid \`config.url\`.\n  - Parameter \`config.url\` must be of type \`string\` or \`null\`, but received: \`${e.x(t.url)}\`.${i}`);if(!e.u(t.port)&&!e.f(t.port))throw new r(`Invalid \`route()\` parameter \`config.port\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid \`config.port\`.\n  - Parameter \`config.port\` must be of type \`number\` or \`null\`, but received: \`${e.x(t.port)}\`, with value: \`${e.realValue(t.port)}\`.${i}`);if(!e.n(t.defaults))throw new r(`Invalid \`route()\` parameter \`config.defaults\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid \`config.defaults\`.\n  - Parameter \`config.defaults\` must be of type \`plain-object\` defaults property, but received: \`${e.x(t.defaults)}\`, with value: \`${e.realValue(t.defaults)}\`.${i}`);if(!e.n(t.routes))throw new r(`Invalid \`route()\` parameter \`config.routes\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid \`config.routes\`.\n  - Parameter \`config.routes\` must be of type \`plain-object\` routes property, but received: \`${e.x(t.routes)}\`, with value: \`${e.realValue(t.routes)}\`.${i}`);if("location"in t){const a=t.location;if(!e.n(a))throw new r(`Invalid \`route()\` parameter \`config.location\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appLocation\` is defined globally or passed as a valid \`config.location\`.\n  - Parameter \`config.location\` must be of type \`plain-object ({ host?: string | undefined; pathname?: string | undefined; search?: string | undefined; })\` of location property, but received: \`${e.x(a)}\`, with value: \`${e.realValue(a)}\`.${i}`);const o=a;if("host"in o&&!e.i(o.host)&&!e.p(o.host))throw new r(`Invalid \`route()\` parameter \`config.location.host\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appLocation\` is defined globally or passed as a valid \`config.location\`.\n  - Parameter \`config.location.host\` must be of type \`string\` or \`undefined\`, but received: \`${e.x(o.host)}\`, with value: \`${e.realValue(o.host)}\`.${i}`);if("pathname"in o&&!e.i(o.pathname)&&!e.p(o.pathname))throw new r(`Invalid \`route()\` parameter \`config.location.pathname\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appLocation\` is defined globally or passed as a valid \`config.location\`.\n  - Parameter \`config.location.pathname\` must be of type \`string\` or \`undefined\`, but received: \`${e.x(o.pathname)}\`, with value: \`${e.realValue(o.pathname)}\`.${i}`);if("search"in o&&!e.i(o.search)&&!e.p(o.search))throw new r(`Invalid \`route()\` parameter \`config.location.search\` property of the \`config\` (fourth parameter) detected:\n- Ensure that \`appLocation\` is defined globally or passed as a valid \`config.location\`.\n  - Parameter \`config.location.search\` must be of type \`string\` or \`undefined\`, but received: \`${e.x(o.search)}\`, with value: \`${e.realValue(o.search)}\`.${i}`)}return!0}static validateAndWrap(a){try{if(a instanceof t)return a;if(!this.isRouterConfigRaw(a))throw new r(`Invalid \`route()\` the \`config\` property at (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid config object, but received: \`${e.x(a)}\`, with value: \`${e.realValue(a)}\`.${i}`);return new t(a)}catch(t){if(t instanceof r)throw t;throw new r(`Invalid \`route()\` the \`config\` property at (fourth parameter) detected:\n- Ensure that \`appRoutes\` is defined globally or passed as a valid config object, but received: \`${e.x(a)}\`, with value: \`${e.realValue(a)}\`.${i}`,e.g(t)?t:new Error(String(t)))}}},{REPO:u,PACKAGE:c}=e.CONFIG,l=class extends String{_config;_route;_params={};constructor(t,r,n=!1,i){if(super(),!e.t(t)&&e.o2(t))throw new a(`Invalid \`route()\`:\n- First parameter (\`name\`) must be of type a \`string\` and a non empty-string.\n- Use \`undefined\` if you don't want to provide a name.\n- Make sure to call a valid \`Router\` instance method, or you'll encounter an error. \n\nℹ️ Learn more: \`${u.LINK}#%EF%B8%8F-warning-calling-route-without-arguments\`.`);if(!e.u(n)&&!e.e(n))throw new a(`Invalid \`route()\`:\n- Third parameter (\`absolute\`) must be of type a \`boolean\` or \`undefined\`, but received: \`${e.x(n)}\`. \n\nℹ️ Learn more: \`${u.LINK}#absolute-url\`.`);n=!!n;const s=this.safeValidateRouterConfig(i||globalThis.appRoutes);if(this._config={...s,absolute:n},t){if(!this._config.routes[t])throw new a(`Route name \`"${t}"\` (first parameter) is not in the route list.`);this._route=new o(t,this._config.routes[t],this._config),this._params=this._parse(r)}}safeValidateRouterConfig(t){try{return s.validateAndWrap(t)}catch(t){if(t instanceof r)throw t;throw new Error(`${c.PREFIX.NAME} - Unknown error while validating \`route()\` config`,{cause:e.g(t)?t:void 0})}}_unresolve(e){e?this._config.absolute&&e.startsWith("/")&&(e=this._location().host+e):e=this._currentUrl();let t={};const[r,a]=Object.entries(this._config.routes).find(([r,a])=>t=new o(r,a,this._config).matchesUrl(e))||[void 0,void 0];return{name:r,...t,route:a}}_currentUrl(){const{host:e,pathname:t,search:r}=this._location();return(this._config.absolute?e+t:t.replace(this._config.url.replace(/^\w*:\/\/[^/]+/,""),"").replace(/^\/+/,"/"))+r}_location(){const{host:t="",pathname:r="",search:a=""}=e.e2()?{}:window.location;return{host:this._config.location?.host??t,pathname:this._config.location?.pathname??r,search:this._config.location?.search??a}}_parse(t={},r=this._route){if(!e.n(t)&&!e.o(t))throw new a(`Invalid \`route()\` \`params\` property detected. \n- Second Parameter (\`params\`) must be of type \`plain-object\` or \`array\`, but received: \`${e.x(t)}\`.\n\nℹ️ More info: \`${u.LINK}#parameters\`.`);t??={},t=["string","number"].includes(typeof t)?[t]:t;const o=r?.parameterSegments.filter(({name:e})=>!this._config.defaults[e]);return e.o(t)?t=t.reduce((t,r,a)=>o?.[a]?{...t,[o[a].name]:r}:e.n(r)||e.o(r)?{...t,...r}:{...t,...e.i(r)?{[r]:""}:{}},{}):1===o?.length&&!t[o?.[0].name]&&(r&&t.hasOwnProperty(Object.values(r.bindings)[0])||t.hasOwnProperty("id"))&&(t={[o?.[0].name]:t}),{...this._defaults(r),...this._substituteBindings(t,r)}}_defaults(e){return e?.parameterSegments.filter(({name:e})=>this._config.defaults[e]).reduce((e,{name:t})=>({...e,[t]:this._config.defaults[t]}),{})}_substituteBindings(t,r=this._route){return Object.entries(t).reduce((t,[o,n])=>{if(!n||"object"!=typeof n||e.o(n)||!r?.parameterSegments.some(({name:e})=>e===o))return{...t,[o]:n};if(!n.hasOwnProperty(r.bindings[o])){if(!n.hasOwnProperty("id"))throw new a(`Object passed as \`"${o}"\` parameter is missing route model binding key \`${r.bindings[o]}\`.\n\nℹ️ More info: \`${u.LINK}#parameters\`.`);r.bindings[o]="id"}return{...t,[o]:n[r.bindings[o]]}},{})}get params(){const{params:t,query:r}=this._unresolve(),a={};for(const t in r){const o=r[t];e.i(o)?a[t]=o:e.o(o)?a[t]=o.filter(e.i).join(","):e.a(o)&&(a[t]=e.O(o))}return{...t,...a}}get routeParams(){return this._unresolve().params||{}}get queryParams(){return this._unresolve().query||{}}has(t){if(!e.i(t))throw new a(`Invalid \`route().has(...)\` parameter \`name\` detected.\n- First parameter (\`name\`) must be of type \`string\`, but received: \`${e.x(t)}\`.`);return this._config.routes.hasOwnProperty(t)}current(t,r={}){if(t&&!e.i(t))throw new a(`Invalid \`route().current(...)\` parameter \`name\` detected.\n- First parameter (\`name\`) must be of type \`string\`, but received: \`${e.x(t)}\`.`);if(r&&!e.n(r)&&!e.o(r))throw new a(`Invalid parameter \`params\` (\`second parameter\`) value passed to \`route().current(...)\`, expected a object or array (e.g., { foo: "bar" } or [{"foo": "bar"}]), but received: \`${e.x(r)}\`.\n\nℹ️ Learn more: \`${u.LINK}#routecurrent-optionally-accepts-parameters-as-its-second-argument-and-will-check-that-their-values-also-match-in-the-current-url\`.`);r??={};const{name:n,params:i,query:s,route:c}=this._unresolve();if(!t)return n;const l=e.i(n)&&new RegExp(`^${t.replace(/\./g,"\\.").replace(/\*/g,".*")}$`).test(n);if(e.t(r)||!l)return l;const p=new o(n,c,this._config);r=this._parse(r,p);const h={...i,...s};if(Object.values(r).every(e=>!e)&&!Object.values(h).some(t=>!e.p(t)))return!0;const d=(t,r)=>Object.entries(t).every(([t,a])=>{if(e.o(a)&&e.o(r[t])){const e=r[t];return a.every(t=>e.includes(t))}return e.a(a)&&e.a(r[t])?d(a,r[t]):r[t]==a});return d(r,h)}toString(){const r=this._route,o=this._params??={};if(!r)throw new a(`Function route() was called without a \`name\` (first parameter) but used as a \`string\`.\n- Pass a valid route name, or use route().current() to get the current route name — or route().current('dashboard') to check if it matches.\n\nℹ️ More info: \`${u.LINK}#%EF%B8%8F-warning-calling-route-without-arguments\`.`);const n=Object.keys(o).filter(e=>!r.parameterSegments.some(({name:t})=>t===e)).filter(e=>"_query"!==e).reduce((e,t)=>({...e,[t]:o[t]}),{}),i=o._query;if(!e.p(i)&&!e.n(i))throw new a(`Invalid parameter \`_query\` property of the \`params\` (second parameter) value passed to \`route()\`, expected a \`plain-object\` (e.g., { foo: "bar" }), but received: \`${e.x(i)}\`.\n\nℹ️ More info: \`${u.LINK}#query-parameters\`.`);return r.compile(o)+t.stringify({...n,...i},{addQueryPrefix:!0,arrayFormat:"indices",encodeValuesOnly:!0,skipNulls:!0,encoder:(t,r)=>e.e(t)?String(+t):r(t)})}valueOf(){return this.toString()}};exports.RouterConfigError=r,exports.route=function(e,t,r=!1,a){const o=new l(e,t,r,a);return e?o.toString():o};